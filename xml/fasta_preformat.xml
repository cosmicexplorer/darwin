<?xml version='1.0' encoding='utf-8'?>
<category id="fasta_preformat" name="fasta_preformat" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <function id="fasta_preformat" name="fasta_preformat">
    <brief> Tranforms block of fasta data into pure genetic data.</brief>
    <doc>Tranforms a block of fasta formatted ascii data into pure genetic data that
can be processed by the functions in block_processing.h.

Basically removes new lines and meta-data. The meta-data for each block is
separated out into a separate structure that is annotated in such a way that
the original fasta file can be recovered by calling de_fasta_preformat. The
meta-data returned from each call should be written to a separate file, which
can be appended to the end of the vcsfmt file.

This function is capable of processing large files in chunks. Some
parameters, like in_comment, should be passed in to each sequential call so
that the function remembers key information about the last chunk it
processed.

Precondition: size of output in memory &gt;= the size of input in memory.

</doc>
    <return>
      <doc>a raw block of genetic data</doc>
      <type name="string_with_size" qualifier="*" ref="utilities::string_with_size::string_with_size#utilities::string_with_size::string_with_size" />
    </return>
    <argument id="fasta_preformat::input" name="input">
      <doc>the input string of fasta data</doc>
      <type name="string_with_size" qualifier="*" ref="utilities::string_with_size::string_with_size#utilities::string_with_size::string_with_size" />
    </argument>
    <argument id="fasta_preformat::output" name="output">
      <doc>a raw string of memory to write unformatted genetic data into</doc>
      <type name="string_with_size" qualifier="*" ref="utilities::string_with_size::string_with_size#utilities::string_with_size::string_with_size" />
    </argument>
    <argument id="fasta_preformat::metadata" name="metadata">
      <doc>a string giving additional information about the fasta data</doc>
      <type name="string_with_size" qualifier="*" ref="utilities::string_with_size::string_with_size#utilities::string_with_size::string_with_size" />
    </argument>
    <argument id="fasta_preformat::in_comment" name="in_comment">
      <doc>whether or not we are currently in a fasta comment.</doc>
      <type builtin="yes" name="bool" qualifier="*" />
    </argument>
    <argument id="fasta_preformat::lines_processed" name="lines_processed">
      <doc>the number of lines previously processed</doc>
      <type builtin="yes" name="int" qualifier="*" />
    </argument>
  </function>
  <function id="fasta_write_header" name="fasta_write_header">
    <brief> Write header to vcsfmt file.</brief>
    <doc>Writes a header line to a VCSFMT file, with information needed to reconstruct
the FASTA file exactly from the VCSFMT file.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fasta_write_header::vcsfmt_file" name="vcsfmt_file">
      <doc>the formatted file to write to</doc>
      <type name="FILE" qualifier="*" />
    </argument>
    <argument id="fasta_write_header::fasta_file" name="fasta_file">
      <doc>the input file to read header data from</doc>
      <type name="FILE" qualifier="*" />
    </argument>
    <argument id="fasta_write_header::metadata_byte_length" name="metadata_byte_length">
      <doc>the length of data in the header</doc>
      <type builtin="yes" name="long" />
    </argument>
  </function>
  <function id="write_annotation" name="write_annotation">
    <brief> A helper function for preformat that writes a line annotation to a string.</brief>
    <return>
      <doc>the number of characters written.</doc>
      <type builtin="yes" name="int" />
    </return>
    <argument id="write_annotation::output" name="output">
      <doc>the string buffer to write to</doc>
      <type builtin="yes" name="char" qualifier="*" />
    </argument>
    <argument id="write_annotation::line_number" name="line_number">
      <doc>the current index of the line in file</doc>
      <type builtin="yes" name="int" />
    </argument>
  </function>
</category>